---
import KeyboardOptions from "../components/KeyboardOptions.astro";
import StickerControls from "../components/StickerControls.astro";
import Layout from "../layouts/Layout.astro";

const stickerHotspots = [
  {
    label: "Astro",
    meshName: "astro-logo-light-gradient",
    position: "1.0085895796022792m 0.8075676354110835m -0.0500000338054255m",
    normal: "-4.371137946441115e-8m 1.3435884034343458e-7m -0.99999999999999m",
  },
];

const keyboardColorOptions = [
  {
    value: "#bc7306",
    classes:
      "border-[#bc7306] active:bg-[#bc7306] [&.selected]:bg-[#bc7306] hover:bg-[#bc7306]",
  },
  {
    value: "#e6e6e6",
    classes:
      "border-[#e6e6e6] active:bg-[#e6e6e6] [&.selected]:bg-[#e6e6e6] hover:bg-[#e6e6e6]",
  },
  {
    value: "#000000",
    classes:
      "border-[#000000] active:bg-[#000000] [&.selected]:bg-[#000000] hover:bg-[#000000]",
  },
];
---

<Layout>
  <model-viewer
    id="model"
    class="w-screen h-[80vh] bg-slate-50"
    src="models/laptop.glb"
    shadow-intensity="2"
    skybox-height="2.5m"
    autoplay
    disable-tap
    max-camera-orbit="auto 90deg auto"
    ar
    camera-controls
  >
    <button
      class="Hotspot"
      name={stickerHotspots[0].label.toLocaleLowerCase()}
      id={`hotspot-${stickerHotspots[0].label.toLocaleLowerCase()}`}
      slot={`hotspot-${stickerHotspots[0].label.toLocaleLowerCase()}`}
      data-position={stickerHotspots[0].position}
      data-normal={stickerHotspots[0].normal}
      data-visibility-attribute="visible"></button>
    <button
      class="Hotspot"
      slot="hotspot-keyboard"
      name="keyboard"
      id="hotspot-keyboard"
      data-position="-1.1718241994341527m 0.1831944303972577m 1.3089070080424285m"
      data-normal="8.537971432630591e-8m 0.9999999999999961m -2.3575008246693747e-8m"
      data-visibility-attribute="visible"></button>
    <svg
      id="lines"
      width="100%"
      height="100%"
      xmlns="http://www.w3.org/2000/svg"
      class="pointer-events-none absolute inset-0 z-10"
    >
      <line
        data-sticker-name={stickerHotspots[0].label.toLocaleLowerCase()}
        id={`line-hotspot-${stickerHotspots[0].label.toLocaleLowerCase()}`}
        class="hidden stroke-violet-500"
        style="stroke-width: 2; stroke-dasharray: 2;"></line>
      <line
        data-sticker-name="keyboard"
        id="line-hotspot-keyboard"
        class="hidden stroke-violet-500"
        style="stroke-width: 2; stroke-dasharray: 2;"></line>
    </svg>
    <button
      class="text-black absolute active:bg-black active:text-white transition-all top-10 p-4 rounded-full z-20 border left-1/2 -translate-x-1/2"
      slot="ar-button"
      id="ar-button"
    >
      View in your space
    </button>

    <div
      id="settings-keyboard"
      class="absolute bottom-20 right-20 opacity-0"
    >
      <KeyboardOptions options={keyboardColorOptions} />
    </div>

    <div class="absolute bottom-0">
      <StickerControls stickers={stickerHotspots} />
    </div>
  </model-viewer>
</Layout>
<script>
  const modelViewer = document.querySelector("model-viewer#model");

  const colorControls = document.querySelector("#settings-keyboard");
  const stickerControls = document.querySelector("#sticker-controls");

  const lines = modelViewer?.querySelectorAll("line");
  const baseRect = modelViewer?.getBoundingClientRect();

  const hotspots = modelViewer?.querySelectorAll(".Hotspot");
  hotspots?.forEach((hotspot) => {
    hotspot.addEventListener("click", () => {
      const { id, name } = hotspot as any;
      const settings = document.querySelector(`#settings-${name}`);
      settings?.classList.toggle("opacity-0");
      const svgLine = document.querySelector(`#line-${id}`);
      svgLine?.classList.toggle("hidden");
    });
  });

  modelViewer?.addEventListener("load", () => {
    // TODO: redraw svg on window resize
    // onResize();
    function drawLine(svgLine: SVGLineElement, name?: string, rect?: DOMRect) {
      if (!rect || !baseRect || !name) return;

      const hotspot = (modelViewer as any)?.queryHotspot("hotspot-" + name);
      svgLine.setAttribute("x1", hotspot.canvasPosition.x);
      svgLine.setAttribute("y1", hotspot.canvasPosition.y);
      svgLine.setAttribute(
        "x2",
        ((rect.left + rect.right) / 2 - baseRect.left).toString()
      );
      svgLine.setAttribute("y2", (rect.top - baseRect.top).toString());
    }

    // use requestAnimationFrame to update with renderer
    const startSVGRenderLoop = () => {
      if (!lines) return;
      lines.forEach((line) => {
        const rect = document
          .querySelector(`#settings-${line.dataset.stickerName}`)
          ?.getBoundingClientRect();

        drawLine(line, line.dataset.stickerName, rect);
      });
      requestAnimationFrame(startSVGRenderLoop);
    };

    startSVGRenderLoop();
  });

  const getPrimitiveByName = (n: string) => {
    const sym = Reflect.ownKeys((modelViewer as any).model).find((s) => {
      return String(s) === "Symbol(primitives)";
    });

    const primitives: any = sym ? (modelViewer as any).model[sym] : [];
    return primitives.find(({ name }: any) => name === n);
  };

  stickerControls?.addEventListener("input", (event: any) => {
    const { name, value, id } = event.target;
    const stickerName = (event.target as any).dataset?.stickerName;
    const stickerMesh = getPrimitiveByName(stickerName).mesh;

    if (name === "position-y") {
      stickerMesh.position.y = -value;
      const hotspotPosition = (modelViewer as any).queryHotspot(
        `hotspot-${id}`
      ).position;

      (modelViewer as any).updateHotspot({
        name: `hotspot-${id}`,
        position: `${hotspotPosition.x}m ${-value - 0.2}m 0m`,
      });
    } else if (name === "position-x") {
      stickerMesh.position.x = -value;
      const hotspotPosition = (modelViewer as any).queryHotspot(
        `hotspot-${id}`
      ).position;

      (modelViewer as any).updateHotspot({
        name: `hotspot-${id}`,
        position: `${-value}m ${hotspotPosition.y}m 0m`,
      });
    } else if (name === "scale") {
      const { scale } = stickerMesh;
      const ratio = scale.x / scale.z;
      stickerMesh.scale.x = Number(value);
      stickerMesh.scale.z = Number(value) / ratio;
    }

    // hacky force rerender
    const materials = (modelViewer as any).model?.materials;
    const currentBaseColorFactor =
      materials[0].pbrMetallicRoughness.baseColorFactor;
    materials[0].pbrMetallicRoughness.setBaseColorFactor(
      currentBaseColorFactor
    );
  });

  colorControls?.addEventListener("click", (event: any) => {
    colorControls.querySelectorAll("button").forEach((button) => {
      button.classList.remove("selected");
    });
    event.target.classList.add("selected");
    const colorString = (event.target as any).dataset?.color;
    const [first, second] = (modelViewer as any).model?.materials;

    first.pbrMetallicRoughness.setBaseColorFactor(colorString);
    second.pbrMetallicRoughness.setBaseColorFactor(colorString);
  });
</script>
